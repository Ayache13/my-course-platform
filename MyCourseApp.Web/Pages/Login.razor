@page "/Login"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject CustomAuthenticationStateProvider AuthProvider


@using MyCourseApp.Shared.Models
@using System.IdentityModel.Tokens.Jwt
@using MyCourseApp.Web.Services

<h3 class="text-center">مرحبًا بك في TutorLink</h3>

<div class="login-container">
    <div class="form-group">
        <label>البريد الإلكتروني:</label>
        <input class="form-control" @bind="loginRequest.Email" type="email" placeholder="أدخل بريدك" />
    </div>
    <div class="form-group">
        <label>كلمة المرور:</label>
        <input class="form-control" @bind="loginRequest.Password" type="password" placeholder="********" />
    </div>

    <div class="form-group text-center">
        <button class="btn btn-primary" @onclick="HandleLogin">تسجيل الدخول</button>
    </div>

    <p class="text-center">
        لا تملك حسابًا؟
        <a @onclick="NavigateToRegister" style="cursor:pointer">أنشئ حسابًا</a>
    </p>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
</div>

@code {
    private LoginRequest loginRequest = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(loginRequest.Email) || string.IsNullOrWhiteSpace(loginRequest.Password))
        {
            errorMessage = "يرجى تعبئة البريد الإلكتروني وكلمة المرور.";
            return;
        }

        try
        {
            var response = await AuthService.LoginAsync(loginRequest);

            if (string.IsNullOrEmpty(response.Token))
            {
                errorMessage = "فشل تسجيل الدخول. التوكن غير موجود.";
                return;
            }

            // حفظ التوكن في localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwtToken", response.Token);

            // إعلام مزود الحالة بالتغيير
            AuthProvider.NotifyUserAuthenticationChanged();

            // استخراج الدور من التوكن
            var role = AuthService.GetRoleFromToken(response.Token);

            if (role == "Student")
            {
                Navigation.NavigateTo("/student/dashboard", forceLoad: true);
            }
            else if (role == "Teacher")
            {
                Navigation.NavigateTo("/teacher/dashboard", forceLoad: true);
            }
            else
            {
                errorMessage = "لم يتم التعرف على دور المستخدم.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "فشل تسجيل الدخول: " + ex.Message;
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
}
