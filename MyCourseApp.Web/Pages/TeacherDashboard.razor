@page "/teacher/dashboard"
@inject TeacherService TeacherService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using MyCourseApp.Shared.Dtos
@using MyCourseApp.Web.Services

<h3 class="text-center mt-4">لوحة تحكم المعلم</h3>

@if (teacher == null)
{
    <p class="text-center text-muted">جاري تحميل بياناتك...</p>
}
else
{
    <div class="card mt-4 p-3 shadow-sm">
        <h5>مرحبًا، @teacher.FullName 👋</h5>
        <p><strong>البريد الإلكتروني:</strong> @teacher.Email</p>
        <p><strong>الدورات الحالية:</strong> @teacherCourses.Count</p>

        <div class="mt-3">
            <button class="btn btn-primary" @onclick="CreateNewCourse">➕ إضافة دورة جديدة</button>
        </div>
    </div>

    @if (teacherCourses.Any())
    {
        <h5 class="mt-5">📚 دوراتك:</h5>
        <ul class="list-group">
            @foreach (var course in teacherCourses)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @course.Title
                    @* <span class="badge bg-info">@course.EnrolledStudents.Count طالب</span> *@
                </li>
            }
        </ul>
    }
}

@code {
    private TeacherDto? teacher;
    private List<CourseDto> teacherCourses = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            teacher = await TeacherService.GetCurrentTeacherAsync();
            // teacherCourses = await TeacherService.GetCoursesByTeacherAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"حدث خطأ أثناء تحميل البيانات: {ex.Message}");
        }
    }

    private void CreateNewCourse()
    {   
        NavigationManager.NavigateTo("/add-course");
    }
}
